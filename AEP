WORKSHEET-01
1.#include<stdio.h>
#include<conio.h>
int main()
{

    char str[100];
    int len=0,i,j;
    printf("\n enter the string:");
    scanf("%[^\n]",str);
    len=strlen(str);
    for(i=0;i<len;i++)
    {
        if(str[i]=='a'||str[i]=='e'||str[i]=='i'||str[i]=='o'||str[i]=='u'||str[i]=='A'||str[i]=='E'||str[i]=='O'||str[i]=='U'||str[i]=='I')
        {

            for(j=i;j<len;j++)
            {
                str[j]=str[j+1];
            }
            i--;len--;
        }
    }
    printf("\n after deleting the vowels string is:%s",str);
    return 0;
} 
3.#include<stdio.h>
#include<conio.h>
int main()
{

    int a[5],b[5],c[5],i,small,size,j,k=0,temp=0;
    for(i=0;i<5;i++)
    {
    printf("enter the array 1 elements");
    scanf("%d",&a[i]);
    }
    for(i=0;i<5;i++)
    {
    printf("enter the elements of array2");
    scanf("%d",&b[i]);
    }
    
    for(i=0;i<5;i++)
    {
        for(j=0;j<5;j++)
        {
            if(a[i]!=b[j])
                temp++; // when a[0] is compared with b0,b1,b2,b3,b4 all the 5 times it should not be equal
            if(temp==5)
            {
                
                c[k]=a[i];
                k++;
            }
            
         }
         temp=0;

    }
    if(k==0)
     printf("small does not exist");
    else
    {
    small=c[0];
    // size=sizeof(c)/sizeof(c[0]);  u dont need this since u have k
    for(i=0;i<k;i++)
    {
        if(c[i]<small)
            small=c[i];
    }
    printf("the smallest element in array 1 which is not present in array 2 is %d",small);
    }
}
4.#include<stdio.h>
#include<conio.h>
void main()
{
    int n,i,j,k,a[50],rem,b[50];
    printf("\n enter the value of k");
    scanf("%d",&k);
    printf("\n enter the elements");
    do
    {
        scanf("%d",&a[i]);
        i++;
    }while(a[i-1]!=-1);
    for(j=0;j<i;j++)
    {
        if (a[j]%2==0)
        {
            k--;
        }
            if(k==0)
            {

                n=j;
                break;
            }
    }
    if(k==0)
    {
        printf("\n the element is %d",a[n]);
    }
    else
    {
        printf("\n -1 ");
    }
}

5.#include<stdio.h>
#include<stdlib.h>

int main()
{
    int a;
    int b;
    int flag = 0;
    int count = 0;
    printf("Enter the number : ");
    scanf("%d",&a);
    while(a != -1)
    {
        printf("Enter the number : ");
        scanf("%d",&b);
        if(a==b)
        {
            flag++;
        }
        else if(b == -1)
        {
            break;
        }
        else
        {
            a=b;
            count++;
        }
    }

    if(count ==  0)
    {
        printf("Only One integer : '0'");
    }
    else
    {
        printf("Distinct integer : '1'");
return 0;
    }
}

worksheet-02

1.#include<stdio.h>
#include<stdlib.h>
void storearray(int a[] ,int);
int findprime(int n)
{
    int i=2,j,prime=0,flag=0;
    while(prime!=n)
    {
        for(j=2;j<=(i/2);j++)
        {

            if((i%j)==0)
            {
                flag=1;
                break;
            }
        }
        if(flag==0)
        {
            prime++;

        }
        i++;
        flag=0;

    }
    return(i-1);

}
void storearray(int b[],int m)
{
    int i,prime,n;
    for(i=0;i<m;i++)
    {
        printf("\n which is the prime number to be stored");
        scanf("%d",&n);
        prime=findprime(n);
        b[i]=prime;
        printf("\n the %dth prime number is:%d\n",n,prime);

    }
}
int main()
{
    int m;
    printf("\n enter the size of array:");
    scanf("%d",&m);
    int a[m];
    storearray(a,m);
    printf("\n array elements are");
    for(int i=0;i<m;i++)
    printf("%d\n",a[i]);
    return 0;
}

3.#include<stdio.h>
#include<conio.h>
void main()
{
    int i=0,n=0,sum=0,res,a[100],total;
    do
    {printf("\n enter the bill number");
        scanf("%d",&a[n]);
        n++;
    }while(a[n-1]!=-1);
    for(i=0;i<n;i++)
    {
        printf("element %d is:%d",i+1,a[i]);
    }
    for(i=0;i<n-1;i++)
    {
        sum=sum+a[i];
    }
    total=(n*(n+1))/2;
    res=total-sum;
    printf("\n the missing bill number is %d",res);
}

4.#include<stdio.h>
#include<stdlib.h>
#include<conio.h>
void main()
{
    char USN[10];
    int i,len=0,flag=0,count=0;
    printf("\n enter the USN");
    scanf("%s",USN);
    len=strlen(USN);
    for(i=0;i<len;i++)
    {
        switch(i)
        {
            case 0:if(USN[0]!=1+'0')
            {
                count++;
                printf("%d",count);
            }
            break;
            case 1:if((USN[1]!='B')&&(USN[1]!='b')){
            count++;
            printf("%d",count);
            }
            break;
            case 2:if((USN[2]!='M')&&(USN[2]!='m')){
            count++;
            printf("%d",count);
            }
            break;
            case 3:if(USN[3]!=2+'0'){
            count++;
            printf("%d",count);
            }
            break;
            case 4:if(USN[4]!=1+'0'){
            count++;
            printf("%d",count);
            }
            break;
            case 5:if((USN[5]!='I')&&(USN[5]!='i')){
            count++;
            printf("%d",count);
            }
            break;
            case 6:if((USN[6]!='S')&&(USN[6]!='s')){
            count++;
            printf("%d",count);
            }
            break;
            case 7:if(isalpha(USN[7])){
            count++;
            printf("%d",count);
            }
            break;
            case 8:if(isalpha(USN[8])){
            count++;
            printf("%d",count);
            }
            break;
             case 9:if(isalpha(USN[9])){
            count++;
            printf("%d",count);
            }
            break;

        }
    }
    if(count!=0)
        {
            printf("\n invalid USN");
        }
        else{
            printf("\n valid USN");
        }
}

worksheet-03 

1.#include <stdio.h>

void sort(int n,int arr[])
{
int i,j,temp;
for(i=0;i<5;i++)
{
    for(j=i+1;j<5;j++)
    {
        if(arr[i]>arr[j])
        {
            temp=arr[i];
            arr[i]=arr[j];
            arr[j]=temp;
        }
    }
}
for(i=0;i<5;i++)
{
    printf("%d\t",arr[i]);
}
 }

int main()
{
 int n = 5;
 int arr[] = { 10,6,4,12,8 };

 sort(n, arr);

 return 0;
}


3.#include<stdio.h>
#include<string.h>
#include<conio.h>
void main()
{
    char str[150];
    char *ch=str;
    printf("\n enter the string");
    gets(str);
    while(*ch!='\0')
    {

        if(*ch>= 'a' && *ch<='z')
        {
            *ch=*ch-32;
        }
        *ch++;
    }
    printf("\n the new string is %s",str);
}


4.#include<stdio.h>
#include<string.h>
#include<conio.h>
int main()
{
    char fname[20],lname[3][20],*str[3][50],*temp[3][20],st[20];
    int i,len=0;
    printf("enter the first name");
    gets(fname);
    puts(fname);
    for(i=0;i<3;i++)
    {
        printf("enter the last name");
        gets(lname[i]);
        puts(lname[i]);
    }
    strcpy(st,fname);
    for(i=0;i<3;i++)
    {
        *temp[i]=st;

    *str[i]=strcat(*temp[i],lname[i]);
     len=strlen(*str[i]);
     printf("\n the name of the person %d is %s",i+1,*str[i]);
     printf("\n the length of the name is %d:",len);
     len=0;
     strcpy(st,fname);
    }
    return 0;
}

worksheet-04


1.void sort(int newval)
{
    struct node *p,*q;
    p=(struct node *)malloc(sizeof(struct node));
    p->data=newval;
    if(start==NULL)
    {
          //insert at first position
        start=p;
        p->next=NULL;
    }
    else
    {
    q=start;
    while((q->data<newval)&&(q->next->data<=newval)&&(q!=NULL))
    { q=q->next; }
    p->next=q->next;
    q->next=p;
    return;
    }
}
void delete_duplicates()
{
    struct node *prev,*p;
    if(start==NULL||start->next==NULL)
    {
        return;
    }
    prev=start;
    p=start->next;
    while(prev->next!=NULL)
    {
        if(prev->data==p->data)
        {
            prev->next=p->next;
            free(p);
            p=prev->next;
        }
        else
        {
            prev=p;
            p=p->next;
        }
    }
}
3.#include<stdio.h>
#include<stdlib.h>
struct node
{
    int data;
    struct node *next;
};
struct node *start=NULL;
void insert_rear()
{
    struct node *new_node,*cur=start;
    new_node=(struct node*)malloc(sizeof(struct node));
    printf("\n enter the data :");
    scanf("%d",&new_node->data);
    new_node->next=NULL;
    if(start==NULL)
        start=new_node;
    else
    {
        while(cur->next!=NULL){
        cur=cur->next;}
    cur->next=new_node;
    }

    printf("\n node inserted:%d->",new_node->data);
}
void display()
{
    struct node *cur=start;
    if(start==NULL)
        printf("\n list is empty");
    else
        {
            while(cur!=NULL)
                {
            printf("%d->",cur->data);
            cur=cur->next;
                }
        }
}
void sorted_insert()
{
    int new_value;
    struct node *p,*q;
    p=(struct node*)malloc(sizeof(struct node));
    printf("\n enter the new value:");
    scanf("%d",&p->data);
    if(start==NULL)
    {
        start=p;
        p->next=NULL;
    }
    q=start;
    while(q!=NULL && q->next->data<=p->data)
    {
        q=q->next;
    }
    q->next=p;
    p->next=q->next->next;

}
void delete_duplicates()
{
    struct node *prev,*p;
    if(start==NULL||start->next==NULL)
    {
        return;
    }
    prev=start;
    p=start->next;
    while(prev->next!=NULL)
    {
        if(prev->data==p->data)
        {
            prev->next=p->next;
            free(p);
            p=prev->next;
        }
        else
        {
            prev=p;
            p=p->next;
        }
    }
}
int doS()
{
struct node*p,*q;
p=q=start;
while (p!=NULL&&p->next!= NULL)
{
p = p->next->next ;
q = q->next;
}
printf("The value you were looking for is %d", q->data);
return 0;
}
void store()
{
    struct node *head=NULL,*main=NULL,*temp1,*temp2;
    struct node *cur=start;
    struct node *new_node=(struct node*)malloc(sizeof(struct node));
    while(cur!=NULL)
    {
        struct node *new_node=(struct node*)malloc(sizeof(struct node));
        new_node->data=cur->data;
        if(cur->data<0)
        {
            temp1=head;
            if(head==NULL)
            {
                head=new_node;
                new_node->next=NULL;
            }
            else{
                while(temp1->next!=NULL)
                {
                    temp1=temp1->next;
                }
                temp1->next=new_node;
                new_node->next=NULL;
            }
        }
        else{

            if(main==NULL)
            {
                main=new_node;
                new_node->next=NULL;
            }
            else{
                    temp2=main;
                while(temp2->next!=NULL)
                {
                    temp2=temp2->next;
                }
                temp2->next=new_node;
                new_node->next=NULL;
            }
        }
        cur=cur->next;
    }
    temp1=head;
    temp2=main;
    printf("\n the negative list is");
    if(head==NULL)
    {
        printf("\n list of negative integers is empty");
    }
    else{
            temp1=head;

        while(temp1!=NULL)
        {
            printf("%d->",temp1->data);
            temp1=temp1->next;
        }
    }
    printf("\n the positive list is");
    if(main==NULL)
    {
        printf("\n list of positive integers in empty");
    }
    else{
        temp2=main;
        while(temp2!=NULL)
        {
            printf("%d->",temp2->data);
            temp2=temp2->next;
        }
    }
}
void main()
{
    int ch;
    while(1)
    {
        printf("\n 1:insert rear,2:display,3:sorted insert,4:delete duplicates,5:dos,6:store");
        printf("\n enter your choice");
        scanf("%d",&ch);
        switch(ch)
        {
            case 1:insert_rear();
            break;
            case 2:display();
            break;
            case 3:sorted_insert();
            break;
            case 4:delete_duplicates();
            break;
            case 5:doS();
            break;
            case 6:store();
            break;
            default:exit(0);
        }
    }
}
4.#include<stdio.h>
#include<stdlib.h>
struct node
{
    int data;
    struct node *next;
};
struct node *start1=NULL;
struct node *start2=NULL;
void insert_rear()
{
    struct node *new_node,*cur=start1;
    new_node=(struct node*)malloc(sizeof(struct node));
    printf("\n enter the data :");
    scanf("%d",&new_node->data);
    new_node->next=NULL;
    if(start1==NULL)
        start1=new_node;
    else
    {
        while(cur->next!=NULL){
        cur=cur->next;}
    cur->next=new_node;

    }



    printf("\n node inserted:%d->",new_node->data);
}
void display()
{
    struct node *cur=start1;
    if(start1==NULL)
        printf("\n list is empty");
    else
        {
            while(cur!=NULL)
                {
            printf("%d->",cur->data);
            cur=cur->next;
                }
        }
}

void insert_rear_two()
{
    struct node *new_node,*cur=start2;
    new_node=(struct node*)malloc(sizeof(struct node));
    printf("\n enter the data :");
    scanf("%d",&new_node->data);
    new_node->next=NULL;
    if(start2==NULL)
        start2=new_node;
    else
    {
        while(cur->next!=NULL){
        cur=cur->next;}
    cur->next=new_node;

    }



    printf("\n node inserted:%d->",new_node->data);
}
void display_two()
{
    struct node *cur=start2;
    if(start2==NULL)
        printf("\n list is empty");
    else
        {
            while(cur!=NULL)
                {
            printf("%d->",cur->data);
            cur=cur->next;
                }
        }
}
void merge()
{
    int i=0,j=0,flag=-1;
    struct node *cur1=start1,*cur2=start2;
    while(cur1!=NULL)
    {
        while(cur2!=NULL)
        {
            if(cur1->data==cur2->data)
            {
                flag=1;
                printf("the merging point is at data %d",cur1->data);
                printf("\nthe number of nodes before merging point in list 1 is %d",j);
                printf("\nthe number of nodes before merging point in list 2 is %d",i);

            }
            cur2=cur2->next;
            i++;
        }
        cur2=start2;
        i=0;
        cur1=cur1->next;
        j++;
        if(flag==1)
        {
            break;

        }
    }
    if(flag==-1)
    {
        printf("\n no intersection point");
    }
}

void main()
{
    int ch;
    while(1)
    {
        printf("\n entrr your choice");
        scanf("%d",&ch);
        switch(ch)
        {
            case 1:insert_rear();
            break;
            case 2:display();
            break;
            case 3:insert_rear_two();
            break;
            case 4:display_two();
            break;
            case 5:merge();
            break;
            default:exit(0);

        }
    }
}

